// Copyright 2018 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package com.google.firebase.database;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import com.google.firebase.database.core.Path;
import com.google.firebase.database.core.utilities.Validation;
import com.google.firebase.database.core.utilities.encoding.CustomClassMapper;
import com.google.firebase.database.snapshot.IndexedNode;
import com.google.firebase.database.snapshot.NamedNode;
import com.google.firebase.database.snapshot.Node;
import java.util.Iterator;

/**
 * A DataSnapshot instance contains data from a Firebase Database location. Any time you read
 * Database data, you receive the data as a DataSnapshot. <br>
 * <br>
 * DataSnapshots are passed to the methods in listeners that you attach with {@link
 * DatabaseReference#addValueEventListener(ValueEventListener)}, {@link
 * DatabaseReference#addChildEventListener(ChildEventListener)}, or {@link
 * DatabaseReference#addListenerForSingleValueEvent(ValueEventListener)}. <br>
 * <br>
 * They are efficiently-generated immutable copies of the data at a Firebase Database location. They
 * can't be modified and will never change. To modify data at a location, use a {@link
 * DatabaseReference DatabaseReference} reference (e.g. with {@link
 * DatabaseReference#setValue(Object)}).
 */
public class DataSnapshot {

  private final IndexedNode node;
  private final DatabaseReference query;

  /**
   * @param ref A DatabaseReference
   * @param node The indexed node
   */
  DataSnapshot(DatabaseReference ref, IndexedNode node) {
    this.node = node;
    this.query = ref;
  }

  /**
   * Get a DataSnapshot for the location at the specified relative path. The relative path can
   * either be a simple child key (e.g. 'fred') or a deeper slash-separated path (e.g.
   * 'fred/name/first'). If the child location has no data, an empty DataSnapshot is returned.
   *
   * @param path A relative path to the location of child data
   * @return The DataSnapshot for the child location
   */
  @NonNull
  public DataSnapshot child(@NonNull String path) {
    DatabaseReference childRef = query.child(path);
    Node childNode = this.node.getNode().getChild(new Path(path));
    return new DataSnapshot(childRef, IndexedNode.from(childNode));
  }

  /**
   * Can be used to determine if this DataSnapshot has data at a particular location
   *
   * @param path A relative path to the location of child data
   * @return Whether or not the specified child location has data
   */
  public boolean hasChild(@NonNull String path) {
    if (query.getParent() == null) {
      Validation.validateRootPathString(path);
    } else {
      Validation.validatePathString(path);
    }
    return !node.getNode().getChild(new Path(path)).isEmpty();
  }

  /**
   * Indicates whether this snapshot has any children
   *
   * @return True if the snapshot has any children, otherwise false
   */
  public boolean hasChildren() {
    return node.getNode().getChildCount() > 0;
  }

  /**
   * Returns true if the snapshot cont